<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
  body {
    font-family: Arial, Helvetica, sans-serif;
  }

  #query_object{
    display: none;
  }

  #query_para_container{
    display: none;
  }

  #shobjects{
    display: none;
  }

  #qobjects{
    display: none;
  }

  #share_object{
    display: none;
  }

  #query_shared_div{
    display: none;
  }

  #function_tuple_flag{
    display: none;
  }

  #blc2_flag{
    display: none;
  }
  #Div1{
   display: block;
  }

  #Div2 {
    display: none;
  }

  #objects{
   display: none; 
  }

  #obj_type{
    display: none;
  }

  #objects_list{
    display: none;
  }
  #newobject{
    display: none;
  }

  #simple_object{
    display: none;
  }
  #subject2{
   display: block; 
  }

  /*#subject1{
   display: block; 
  }*/


  #prep{
   display: block; 
  }

  #simple_object_id {
    display: none;
  }

  #complex_object_id {
    display: none;
  }
  /** {
    box-sizing: border-box;
  }*/

  /* Add padding to containers */
  /*.container {
    padding: 16px;
    background-color: white;
  }*/

  /* Full-width input fields */
  input[type=text], input[type=password] {
    width: 50%;
    padding: 15px;
    margin: 5px 0 22px 0;
    border: none;
    background: #f1f1f1;
  }


  select {
    width: 50%;
    padding: 15px;
    margin: 5px 0 22px 0;
    border: none;
    background: #f1f1f1;
  }
  /*input[type=text]:focus, input[type=password]:focus {
    background-color: #ddd;
    outline: none;
  }*/

  /* Overwrite default styles of hr */
  hr {
    border: 1px solid #f1f1f1;
    /*margin-bottom: 25px;*/
  }

  /* Set a style for the submit button */
  .registerbtn {
    background-color: #4CAF50;
    color: white;
    padding: 16px 20px;
    margin: 8px 0;
    border: none;
    cursor: pointer;
    width: 50%;
    opacity: 0.9;
  }

  .registerbtn:hover {
    opacity: 1;
  }

  /* Add a blue text color to links */
  a {
    color: dodgerblue;
  }

  /* Set a grey background color and center the text of the "sign in" section */
  .signin {
    background-color: #f1f1f1;
    text-align: center;
  }
</style>
</head>
<%= success %>
<script type="text/javascript">
  var msg =<%-JSON.stringify(success)%>
  
  if(msg == "None" ){ 

  }else{

  showAlert(msg)

  }

  function showAlert(msg1){
  alert(msg1);
}
</script>

<script>
    total_fields = 0;
    principals = []
    protocol_steps = []
    function getInitPrinicipals(val) {
      no_of_principals = val;
      total_fields = val;
      var names_container = document.getElementById("names_of_principals");
      for (i = 0; i < no_of_principals; i++) {
        names_container.appendChild(document.createTextNode("Enter name of principal " + (i+1)));
        var input = document.createElement("input");
        input.type = "text";
        input.id = "principal_name" + i;
        names_container.appendChild(input);
        names_container.appendChild(document.createElement("br"));
      }
    }

    function getInitObjs(val) {
      no_of_init_objs = val;
      var objs_container = document.getElementById("names_of_initial_objects");
      for (i = 0; i < no_of_init_objs; i++) {
        objs_container.appendChild(document.createTextNode("Enter the initial label of the object" + (i+1)));
        var input = document.createElement("input");
        /*input.setAttribute("id", "mySelect");*/
        input.type = "text";
        input.name = "name_obj" + i;
        input.id = "name_obj" + i;
        objs_container.appendChild(input);
        objs_container.appendChild(document.createElement("br"));
        objs_container.appendChild(document.createTextNode("Enter the owner of the object" + (i+1)));
        var input = document.createElement("input");
        input.type = "text";
        input.name = "owner_obj" + i;
        input.id = "owner_obj" + i;
        objs_container.appendChild(input);
        objs_container.appendChild(document.createElement("br"));
        objs_container.appendChild(document.createTextNode("Enter the principals who can read the object" + (i+1)));
        var input = document.createElement("input");
        input.type = "text";
        input.name = "reader_obj" + i;
        input.id = "reader_obj" + i;
        objs_container.appendChild(input);
        objs_container.appendChild(document.createElement("br"));
        objs_container.appendChild(document.createTextNode("Enter the principals who have influenced the object " + (i+1)));
        var input = document.createElement("input");
        input.type = "text";
        input.name = "writer_obj" + i;
        input.id = "writer_obj" + i;
        objs_container.appendChild(input);
        objs_container.appendChild(document.createElement("br"));
      }
      /*number_of_extra_fields = (no_of_principals * + (no_of_init_objs * 4));
      document.getElementById("total_input_fields").value = number_of_extra_fields*/
    }
  </script>
  <script type="text/javascript">
    class Principal{
        constructor(namep, ownerp, readerp, writerp) {
        this.namep=namep
        this.ownerp=ownerp
        this.readerp = readerp
        this.writerp = writerp
        this.localObjects=[]
        }
    }

    class PObject{
      static count = 0;
      constructor(nameo, ownero, readero, writero) {
      this.assigno= "O"+ PObject.count
      this.nameo=nameo
      this.ownero=ownero
      this.readero=readero
      this.writero=writero
      this.node = new Tree()
      PObject.count = PObject.count + 1
      }
      
    }

    class Tree{
      constructor(){
        this.child = []
        this.data = null
      }
      printtree(level){
            console.log("\t"*level+ this.data)
            nochild = (this.child.length)
            for (chld in nochild){
              this.child[nochild[chld]].node.printtree(level+1)    
            }
      }
      Checkreaders(self,pri,obj,level){
        u=obj.length
        v=parseInt(obj.substr(1,u))
        if (!pri in object1[v].readero){
          console.log("Principal",pri,"is not allowed to read",obj,":",object1[v].node.data)
          /*console.log("Do you want to add principal",pri,"to the readers list of",obj,"?(y/n)")*/
          if (confirm("Do you want to add principal",pri,"to the readers list of",obj,"?(y/n)")) {
              txt = "yes";
          } else {
              txt = "no";
          }
          
          update = txt
          if (update == 'yes'){
            object1[v].readero.push(pri)
            console.log("The label of the object now is",object1[v].assigno,":",object1[v].nameo,"(",object1[v].ownero,",",object1[v].readero,",",object1[v].writero,")")
          }
        }
        nochild = this.child.length
        for (chld in nochild){
          this.child[nochild[chld]].node.Checkreaders(pri,this.child[chld].assigno,level+1)
        }
      }
    }
</script>
<script type="text/javascript">
list_principals = []
objects = []
principals = []
main_object = {}

function validateform(){ 
      var name_of_protocol = document.getElementById("name").value;
      protocol_steps.push(name_of_protocol)
      var bptype = document.getElementById("bptype").value;
      protocol_steps.push(bptype)
      var version  = document.getElementById("version").value;
      protocol_steps.push(version)
      var no_of_principals = document.getElementById("no_of_principals");
      protocol_steps.push(no_of_principals.value)
      var no_of_objects = document.getElementById("no_of_objs");
      
      for(var i=0 ;i < no_of_principals.value;i++){
        prin_tag = "principal_name"+i
        /*console.log("heol"+document.getElementById(prin_tag).value)*/
        list_principals.push(document.getElementById(prin_tag).value)
        protocol_steps.push(document.getElementById(prin_tag).value)  // for workflow file

      }
      protocol_steps.push(no_of_objects.value)
      for(var i=0 ;i < no_of_principals.value;i++){
        principal = new Principal(document.getElementById("principal_name"+i).value, document.getElementById("principal_name"+i).value, list_principals, document.getElementById("principal_name"+i).value);
        principals.push(principal)
      }
      /*console.log("principals:", principals[0]["ownerp"])*/
      for(var i=0 ;i < no_of_objects.value;i++){
        name_tag = "name_obj"+i
        name = document.getElementsByName(name_tag)[0].value
        protocol_steps.push(name)
        owner_tag = "owner_obj"+i
        owner = document.getElementsByName(owner_tag)[0].value
        protocol_steps.push(owner)
        if (!list_principals.includes(owner)){
          alert(owner+":not in principals")
          return false
        }
        reader_tag = "reader_obj"+i
        readers = document.getElementsByName(reader_tag)[0].value
        protocol_steps.push(readers)
        writer_tag = "writer_obj"+i
        writers = document.getElementsByName(writer_tag)[0].value
        protocol_steps.push(writers)
        tmp_readers= readers.split(",");
        for(var j=0;j<tmp_readers.length;j++){
          if(!list_principals.includes(tmp_readers[j]))
          {
            alert(tmp_readers[j]+" reader not in principals for object"+ name)
            return  false;
          }
        }
        writer_tag = "writer_obj"+i
        writers = document.getElementsByName(writer_tag)[0].value
        tmp_writers = writers.split(",");
        for(var k=0;k<tmp_writers.length;k++){
          if(!list_principals.includes(tmp_writers[k]))
          {
            alert(tmp_writers[k]+" writers not in principals for object"+ name)
            return false
          }
        }
      

        object = new PObject(document.getElementById("name_obj"+i).value, document.getElementById("owner_obj"+i).value, tmp_readers, tmp_writers);    
        /*console.log(object.assigno)*/
        object.node.data = document.getElementById("name_obj"+i).value
        objects.push(object)

        
      }
      
      main_object["principals"] = principals
      main_object["objects"] = objects
      
     return true
}


function switchVisible() {
      var div1=document.getElementById('Div1');
      var div2=document.getElementById('Div2');
      
      if (div1 !== undefined && div2 !== undefined) {
        div1.style.display = div2.style.display === '' ? 'none' : div2.style.display === 'none' ? 'none' : 'block';
        div2.style.display = div1.style.display === 'block' ? 'none' : 'block';
      }
}

function main(){
  if(validateform() == true){
    stmt()
    principalsDropDown()
    switchVisible()
  }
}
</script>
<script type="text/javascript">
count = 0
namepr = []
nameobj = []
verbs = ["creates", "sends"]
function stmt(){
    var rows = main_object
    principal = rows["principals"]
    
    
    for(var k1 =0;k1<principal.length;k1++){
      namepr.push(principal[k1].namep)
    }

    object1 = rows["objects"]
    
    
    for(var k1 =0;k1<object1.length;k1++){
      nameobj.push(object1[k1].nameo)
    }
    dictpri = {}
    /*count = 0
    auto = 0*/
    ProcessingFile=""
    prn = principal.length
    obn = object1.length
    for(var i=0;i< prn;i++) {
      dictpri[principal[i].namep]=i
    }
    //console.log("dictpri", dictpri)
    label = []
    for (var i=0;i< obn;i++){
       readers_of_objects = object1[i].readero
       readn = readers_of_objects.length
        for (var j=0;j<readn;j++){
          k = dictpri[readers_of_objects[j]] //k = dictpri[object1[i].readero[j]]
          principal[k].localObjects.push(object1[i].assigno)
        }
    }
}

function selectobjects(){
  document.getElementById("objects").options.length = 0;
  var x = document.getElementById("objects");
  var option = document.createElement("option");
      option.text = "Select Object";
      x.add(option);
    local_objects_subject1 = []
    selected_subject1 = document.getElementById("subject1").value;
    local_objects_subject1 = principal[dictpri[selected_subject1]].localObjects
    for(var i=0;i<local_objects_subject1.length;i++){
      var option = document.createElement("option");
      option.text = local_objects_subject1[i];
      x.add(option);  
    }
  document.getElementById("subject2").options.length = 0;
  var x = document.getElementById("subject2");
    var option = document.createElement("option");
      option.text = "Select principal";
      x.add(option);
    selected_subject1 = document.getElementById("subject1").value;
    for(var i=0;i<namepr.length;i++){
      /*if(selected_subject1 !== namepr[i]){*/
        var option = document.createElement("option");
        option.text = namepr[i];
        x.add(option);    
      /*}*/
    }
}

function principalsDropDown() {
    document.getElementById("subject1").options.length = 0;
    var x = document.getElementById("subject1");
    var option = document.createElement("option");
      option.text = "Select principal";
      x.add(option);
    for(var i=0;i<namepr.length;i++){
      var option = document.createElement("option");
      option.text = namepr[i];
      x.add(option);  
    }

    document.getElementById("verbs").options.length = 0;
    var x = document.getElementById("verbs");
    var option = document.createElement("option");
      option.text = "Select Verb";
      x.add(option);
    for(var i=0;i<verbs.length;i++){
      var option = document.createElement("option");
      option.text = verbs[i];
      x.add(option);  
    }
}

function enable(){
    var subject1_principal =  document.getElementById("subject1").value
    var objects_tag = document.getElementById("objects");
    var objects_text_tag = document.getElementById("newobject");
    var prep = document.getElementById("prep")
    prep.style.display = 'none';
    var option = document.createElement("option");
    option.text = "Select";
    var x = document.getElementById("subject2");
    var simple_object_id = document.getElementById("simple_object_id")
    var complex_object_id = document.getElementById("complex_object_id")
    var object_type = document.getElementById("object_type")
    var obj_type = document.getElementById("obj_type")
    var objects_list = document.getElementById("objects_list")
    var query_object = document.getElementById("query_object")
    var share_object = document.getElementById("share_object")
    var function_tuple_flag  = document.getElementById("function_tuple_flag")
    var query_shared_div = document.getElementById("query_shared_div")


    if(document.getElementById("verbs").value == "creates"){
        obj_type.style.display = "block"
        object_type.style.display = "block"
        objects_tag.style.display = "none"
        objects_text_tag.style.display="none"
        objects_list.style.display = "none"
        prep.style.display = 'block';
        document.getElementById("prep").value = "for"; 
        var sub2 = document.getElementById("subject2")
        sub2.style.display = "block"
        query_para_container.style.display = "none"        
    }
    else if(document.getElementById("verbs").value == "sends"){ 
      var bptype = document.getElementById("bptype").value
      if (bptype == "BLC1"){
        query_para_container.style.display = "none"
      }else if(bptype == "BLC2"){
        blc2_flag.style.display = "block"
        function_tuple_flag.style.display = "block"
        query_para_container.style.display = "none"

      }else if(bptype == "SLC"){

        /*query_shared_div.style.display = "block"*/
        query_para_container.style.display = "block"
        shobjects.style.display = "block"
        qobjects.style.display = "block"
        document.getElementById("shobjects").options.length = 0;
        var x = document.getElementById("shobjects");
        var option = document.createElement("option");
        local_objects_subject1 = []
        selected_subject1 = document.getElementById("subject1").value;
        local_objects_subject1 = principal[dictpri[selected_subject1]].localObjects
        for(var i=0;i<local_objects_subject1.length;i++){
          var option = document.createElement("option");
          option.text = local_objects_subject1[i];
          x.add(option);

        }
        document.getElementById("qobjects").options.length = 0;
        var y = document.getElementById("qobjects");
        var option = document.createElement("option");
        local_objects_subject1 = []
        selected_subject1 = document.getElementById("subject1").value;
        local_objects_subject1 = principal[dictpri[selected_subject1]].localObjects
        for(var i=0;i<local_objects_subject1.length;i++){
          var option = document.createElement("option");
          option.text = local_objects_subject1[i];
          y.add(option);

        }
        

      }
      obj_type.style.display = "none"
      object_type.style.display = "none"
      simple_object_id.style.display = "none"
      complex_object_id.style.display = "none"
      objects_list.style.display = "block"
      objects_tag.style.display = "block"
      objects_text_tag.style.display="none"
      prep.style.display = 'block';
      document.getElementById("prep").value = "to";
      var sub2 = document.getElementById("subject2")
      sub2.style.display = "block"
    }
    else if(document.getElementById("verbs").value == "receives"){
      
        obj_type.style.display = "none"
        objects_tag.style.display = "none"
        objects_text_tag.style.display="block"
        /*objects_tag.style.display = "block"
        objects_text_tag.style.display="none"*/
        x.style.display = "block"
        var sub2 = document.getElementById("subject2")
        sub2.style.display = "none"
    }
}

function enable_Field(){
  var str = document.getElementById("function_tuple_flag").value
  if(str == 0){
    return true
  }else{
    return false
  }
}
fcount = 1
function enable_objectField(){
  var str = document.getElementById("object_type").value
  /*console.log(str)*/
  var str1 = document.getElementById("complex_object_id")
  var str2 = document.getElementById("simple_object_id")
  var str3 = document.getElementById("simple_object")
  if(str === "complex"){
  str1.style.display = "block"
  str2.style.display = "none"
  document.getElementById('function').value = "f"+fcount
  fcount = fcount +1
  }else{
  str1.style.display = "none"
  str2.style.display = "block"
  str3.style.display = "block"

  }
}
function getQueryObjects(){
  var str = document.getElementById("query_object").value
  var query_para_container = document.getElementById("query_para_container");
  query_para_container.style.display = "block"
  qobjects.style.display = "block"
  shobjects.style.display = "block"
}
function getSharedObjects(){

}
function getParameter(){
  var str = document.getElementById("para_object").value
  var parameter_container = document.getElementById("parameter_container");

    var fc = parameter_container.firstChild;

    while( fc ) {
    parameter_container.removeChild( fc );
    fc = parameter_container.firstChild;
      }
      for (i = 0; i < str; i++) {
        parameter_container.appendChild(document.createTextNode("Enter " + (i+1) +" parameter"));
        var input = document.createElement("input");
        input.type = "text";
        input.name = "para_obj" + i;
        input.id = "para_obj" + i;
        parameter_container.appendChild(input);
        parameter_container.appendChild(document.createElement("br"));
      }
}
function Union(lst1, lst2){
  /*console.log(typeof(lst1), typeof(lst2))*/
  if(lst1.length > lst2.length){
    for(i in lst2){
      if(lst1.indexOf(lst2[i]) == -1){
        lst1 = []
        lst1.push(lst2[i])
      }
    }
    final_list = lst1
  }else{
    for(i in lst1){
      if(lst2.indexOf(lst1[i]) == -1){
        lst2.push(lst1[i])
      }
      final_list = lst2
    }
  }
  console.log("Union",final_list)
  return final_list
}

function Intersection(lst1, lst2){
  intersect = []
  if(lst1.length < lst2.length){
      for(i in lst1){
        if(lst2.indexOf(lst1[i]) != -1){
          intersect.push(lst1[i])
        }
        
      }
      return intersect
    }else{
      for(i in lst2){
        if(lst1.indexOf(lst2[i]) != -1){
          intersect.push(lst2[i])
        }
      }
    /*console.log("Intersect: ",final_list)*/
    return intersect
  }
}

function verifystep(){
  console.log("In verifystep")
  subject1 = document.getElementById("subject1").value;
  prep = document.getElementById("prep").value
  bptype_1 = document.getElementById("bptype").value
  
  fnc = document.getElementById("verbs").value;
  /*subject2 = document.getElementById("subject2").value*/
  subject2_multi = document.getElementById("subject2").selectedOptions
  st = []

  for(var i=0;i<subject2_multi.length;i++){
   st.push(subject2_multi[i].value)
  }
  
  subject2 = st.toString()
  if(fnc == "creates"){
    object_type = document.getElementById("object_type").value
    if(object_type === "complex"){
      function_name = document.getElementById("function").value
      para_object = document.getElementById("para_object").value

      tmp_list_para = []
      for(var k=0;k< para_object;k++){
          tmp_list_para.push(document.getElementById("para_obj"+k).value)
      }

      newobject = function_name+"("+tmp_list_para.toString()+")"
      console.log("new Object- complex",newobject)  
    }else{
      newobject = document.getElementById("simple_object").value
      console.log("new Object- simple",newobject)  
    }
    
    flag = CreateObject(subject1,newobject,subject2)
    
    if (flag == true){
     step = subject1 +" "+ fnc +" "+ newobject+ " "+ prep +" "+ subject2
     protocol_steps.push(step)
   }
  }
  if(fnc == "sends"){
    object = document.getElementById("objects").value
    shared_multi = document.getElementById("shobjects").selectedOptions
    st = []
    for(var i=0;i<shared_multi.length;i++){
      st.push(shared_multi[i].value)
    }
    share_objects = st.toString()


    query_multi = document.getElementById("qobjects").selectedOptions
    st = []
    for(var i=0;i<query_multi.length;i++){
      st.push(query_multi[i].value)
    }
    query_objects = st.toString()

    flag = SendObject(subject1,object,subject2)
    if(flag == true){
      console.log("%%%%%%%%%%%%%%%%%%",bptype_1)
      step = subject1 +" "+ fnc +" "+ object+ " "+ prep +" "+ subject2
      protocol_steps.push(step) 

      if (bptype_1 == "BLC2"){
        function_tuple_flag = document.getElementById("function_tuple_flag").value
        protocol_steps.push(function_tuple_flag)
      }else if(bptype_1 == "SLC"){
        protocol_steps.push(share_objects)
        protocol_steps.push(query_objects)  
      }
      
      recevied_obj_number = parseInt(object.substr(1,object.length))
      recevied_obj = "O"+(recevied_obj_number+1)
      rflag = ReceiveObject(subject2,recevied_obj)
      if(rflag == true){
        step = subject2 +" "+ "receives" +" "+ recevied_obj
        protocol_steps.push(step)
      }
    }
  }
  if(fnc == "receives"){
    newobject = document.getElementById("newobject").value
    /*flag = ReceiveObject(subject1,newobject)
    if(flag == true){
      step = subject1 +" "+ fnc +" "+ newobject
      protocol_steps.push(step)
    }*/
    
  }

  console.log("Protocol steps: ", protocol_steps)
  document.getElementById("subject1").value = "Select principal"
  document.getElementById("verbs").value = "Select Verb"
  obj_type.style.display = "none"
  /*object_type.style.display = "none"*/
  simple_object_id.style.display = "none"
  complex_object_id.style.display = "none"
  objects_list.style.display = "none"
  //objects_tag.style.display = "none"
  //objects_text_tag.style.display="none"
  /*objects_list.style.display = "none"
  obj_type.style.display = "none"
  query_para_container.style.display = "none"*/
  //document.getElementById("workflow").value = protocol_steps
  //document.getElementById("saveworkflow").value = protocol_steps
  console.log("Objects: ", objects)
}

function getConfirmation(p2) {
  var txt;
  if (confirm("Allowing principals",p2,"to read the new object was a security threat. Do you still wish to allow principals",p2,"to read the new object? (y/n)")) {
    txt = "yes";
  } else {
    txt = "no";
  }
  return txt;
}
/* Front End code - End*/

function CheckDowngrade(p1,r,w,p2){
  console.log("Calling CheckDowngrade", p1, r, w, p2)
    flag = 0
    for (p in p2){
      if (! p2[p] in r){
        flag = 1
        break
      }
    }
    if (flag == 0){
      return 0
    }

    r = Union(r,w)
    for (p in p2){
      if (!p2[p] in r){
        flag = 0
        break
      }
    }

    if (w == [p1] || flag == 1){
      alert("Principals",p2,"added as readers for the new object\n")
      return 0
    }
    else{
      /*console.log("Allowing principals",p2,"to read the new object was a security threat\n")
      console.log("Do you still wish to allow principals",p2,"to read the new object? (y/n)")*/
      choice = getConfirmation(p2)
      if (choice == 'y'){
        alert("Adding principals",p2,"as readers as per request\n")
        return 0
      }
      else{
        return 1
      }
    }
}

function AddObjecttoLocal(p1,assignobj){
    console.log("AddObjecttoLocal: ", assignobj)
    j = parseInt(assignobj.substr(1,assignobj.length))
    i = dictpri[p1]
    principal[i].localObjects.push(objects[j].assigno)
    console.log("The object",object1[j].nameo,"is stored as",assignobj,"and should be referred as the same in further references")
    console.log("The initial label of the object ",assignobj,"is",objects[j].nameo,": (",objects[j].ownero,",",objects[j].readero,",",objects[j].writero,")")
  }

function CheckObject(obj){
  start = obj.indexOf('(')
    if (start == -1){
      return "simple"
    }
    if (obj[obj.length-1] != ')'){
      return "incorrect"
    }
    return "complex"
}

function ParseComplex(p1,obj){
    start = obj.indexOf('(')
    potential = obj.substr(start+1,obj.length-1)
    objlist = potential.split(",")
    i = dictpri[p1]

    for (o in objlist){
      if (!objlist[o] in principal[i].localObjects){
        console.log(obj,"is not a wellformed complex object\n")
        return []
      }
    }

    return objlist
}

function CreateObject(p1,obj,p2){
  LabelChange = 0
  im = dictpri[p1]
  readers = principal[im].readerp
  writers = principal[im].writerp

  objectType = CheckObject(obj)
  console.log("Object Type:"+ objectType);
  if(objectType == "incorrect"){
    console.log("The object",obj,"is not well formed\n")
    return false
  }
  if(objectType == "complex"){
    objList = ParseComplex(p1,obj)
    if (objList.length==0){
      return false
    }
    else{
      for(var k=0;k<objList.length;k++){
        v=parseInt(objList[k].substr(1,objlist[k].length))
        readers = Intersection(readers,objects[v].readero)
        console.log("After Intersection:", readers)
        writers = Union(writers,objects[v].writero)
      }
      LabelChange = 1
    }
  }

  p2 = p2.split(",")
  if (CheckDowngrade(p1,readers,writers,p2) == 1){
    return false
  }

  if (LabelChange == 1){
    principal[im ].readerp = readers
    principal[im].writerp = writers
  }
  
  /*object1.append(Object(obj,principal[i].ownerp,Union(principal[i].readerp,p2),principal[i].writerp))*/
  new_object = new PObject(obj,principal[im].ownerp,Union(principal[im].readerp,p2),principal[im].writerp);    
  /*console.log("new_object", new_object.assigno)*/
  objects.push(new_object)
  AddObjecttoLocal(p1,new_object.assigno)
  return true
}


function SendObject(p1,obj,p2){
    
    ik = dictpri[p1]
    console.log("SendObject ik:", ik)
    console.log("SendObject #########", principal)
    if (!obj in principal[ik].localObjects){
      console.log(obj,"is not in the local space of principal",p1,"\n")
      return 1
    }

    v=parseInt(obj.substr(1,obj.length))
    readers = principal[ik].readerp
    writers = principal[ik].writerp
    readers = Intersection(readers,object1[v].readero)
    writers = Union(writers,object1[v].writero)
    if (CheckDowngrade(p1,readers,writers,[p2]) == 1){
      return false
    }

    principal[ik].readerp = readers
    principal[ik].writerp = writers

    console.log("SendObject ownerp",ik, principal, principal[ik].ownerp)
    new_object = new PObject(obj,principal[ik].ownerp,Union(principal[ik].readerp,[p2]),principal[ik].writerp)
    objects.push(new_object)
    AddObjecttoLocal(p1,new_object.assigno)
    console.log("The object being sent is referenced as",new_object.assigno, new_object.ownero,"\n")
    return true
}

function ReceiveObject(p1,obj){
    
    v=parseInt(obj.substr(1,obj.length))
    if (!p1 in object1[v].readero){
      console.log("------Error-----principal",p1,"is not allowed to read object",obj,"\n")
      return false
    }

    l=dictpri[p1]
    principal[l].readerp = Intersection(principal[l].readerp,object1[v].readero)
    console.log("In ReceiveObject - Union function", principal[l].writerp,object1[v].writero)
    principal[l].writerp = Union(principal[l].writerp,object1[v].writero)


    new_object = new PObject(object1[v].nameo,principal[l].ownerp,principal[l].readerp,principal[l].writerp)
    objects.push(new_object)
    console.log("The object being recevied is referenced as",new_object.assigno,"\n")
    AddObjecttoLocal(p1,new_object.assigno)
    return true
}
</script>


<script type="text/javascript">
  function submitWorkFlow(){
    protocol_steps.push("exit")
    protocol_steps_final = {}
    for (i in protocol_steps){
      protocol_steps_final[i] = protocol_steps[i]
    }
    final_data  = JSON.stringify(protocol_steps_final)
    document.getElementById("workflow").value = final_data
    console.log("protocol_steps_final: ", protocol_steps_final)
    if (confirm(document.getElementById("workflow").value)) {
      return true
    } else {
      return false
    }

  }
  function saveWorkFlow(){
   protocol_steps_save = {}
    for (i in protocol_steps){
      protocol_steps_save[i] = protocol_steps[i]
    }
    
    document.getElementById("saveworkflow").value = JSON.stringify(protocol_steps_save) //protocol_steps_save
    /*console.log("protocol_steps_save", JSON.stringify(protocol_steps_save))
    console.log("protocol_steps*********", document.getElementById("saveworkflow").value)*/
    if (confirm(protocol_steps_save)) {
      return true
    } else {
      return false
    }
  }
</script>
<body>

<div name="myform">
  <!-- {% csrf_token %}  -->
  <div class="container" id="Div1">
    <h1>Welcome to SPDL</h1>
    <p>Please fill in this form to initialize business process definition.</p>
    <hr>

    <label for="Name"><b>Enter name of the protocol:</b></label>
    <input type="text" placeholder="Protocol Name" name="name" id="name" required>
    <br>
    <label for="bptype"><b>Business Process Type</b></label>
    <select id="bptype" name="bptype">
      <option value="MLC">MLC</option>
      <option value="BLC1">BLC1</option>
      <option value="BLC2">BLC2</option>
      <option value="SLC">SLC</option>
    </select>
    <br>
    <label for="version"><b>Version</b></label>
    <input type="text" placeholder="Enter Version" name="version" id="version" required>
    <br>
    
    <br>
  
    <label for="Number of Principals"><b>Enter the number of principals in the system</b></label>
    <input type="text" placeholder="no_of_principals" name="no_of_principals" id="no_of_principals" required onchange="getInitPrinicipals(this.value)">

    <div id="names_of_principals"></div>

    <label for="Number of Init object"><b>Enter the number of initial objects in the system</b></label>
    <input type="text" placeholder="no_of_objs" name="no_of_objs" id="no_of_objs" required onchange="getInitObjs(this.value)">
    
    <div id="names_of_initial_objects"></div>
    <!-- <input type="text" name="total_input_fields" id="total_input_fields"/> -->
    <hr>
    <button class="registerbtn" id="main" onclick="main()">Submit</button>
    <!-- <input type="submit" name="submit" class = "registerbtn" value="registerbtn"> -->
  </div>

  <div class="container" id="Div2">
    <h1>Add Protocol steps</h1>
    <p>Please fill in this form to add steps</p>
    <hr>

    <label for="Name"><b>Principal1</b></label>
    <select id="subject1" onchange="selectobjects()">
      
    </select>
    <br>
    <label for="Verb"><b>Verb</b></label>
    <select id="verbs" onchange="enable()" required="true"></select><br>
    <div id="blc2_flag">
    <label for="function_tuple_flag"><b>Is this function a tuple ?</b></label> 
     <select id="function_tuple_flag" name="function_tuple_flag" onchange="enable_Field()">
      <option value="y" >True</option>
      <option value="n" selected>False</option>
    </select><br>
    </div>

    <div id="obj_type">
    <label for="obj_type"><b>Object Type</b></label> 
     <select id="object_type" name="object_type"  required="true" onchange="enable_objectField()">
      <option value="default">Select Object</option>
      <option value="simple">Simple</option>
      <option value="complex">Complex</option>
    </select><br>
    </div>
    <div id="simple_object_id">
    <label for="Name"><b>Object Name</b></label>
    <input type="text" name="simple_object" id="simple_object" ><br> 
    </div>
    <br>
    <div id="complex_object_id">
    <input type="text" name="function" id="function" placeholder="function"readonly="true">
    <label for="Name"><b>Number of parameters required</b></label>
    <input type="text" name="para_object" id="para_object" onchange="getParameter()"><br> 
    <div id="parameter_container"></div>
    </div>

    <div id="objects_list">
    <label for="Name"><b>Object</b></label>
    <select id="objects">  
    </select>
    </div>
    <br>
    <!-- <div class="container" id="blc2">
      
    </div> -->
    <input type="text" name="newobject" id="newobject" >
    <input type="text" name="prep" id="prep" placeholder="to/for"readonly="true">
    <br>
    <label for="Verb"><b>Principal2</b></label>
    <select id="subject2" multiple required="true">
      
    </select>
    <br>
    <div id="query_para_container">
    <label for="Name"><b>Objects to be shared until this step</b></label>
    <select id="shobjects" multiple >
    <option value="default">Select Type</option>  
    </select>
    <label for="Name"><b>Query Objects until this step</b></label>
    <select id="qobjects" multiple>  
      <option value="default">Select Type</option>
    </select>
    </div>
    </br>
    <button type="submit" name="Next" class = "registerbtn" value="Next Step" onclick="verifystep()">Next</button>


    <form method="POST" action="/save">
    <input type="text" name="saveworkflow" id="saveworkflow" hidden="true">
    <input type="submit" name="submit" class = "registerbtn" value="Save" onclick="saveWorkFlow()"></input>  
    </form>

    <form method="POST" action="/newprotocol">
    <input type="text" name="workflow" id="workflow" hidden="true">
    <input type="submit" name="submit" class = "registerbtn" value="Done" onclick="return submitWorkFlow()"></input>  
    </form>
  </div>
</div>

</body>
</html>